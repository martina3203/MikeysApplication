#include "WorkoutWindow.h"

WorkoutWindow::WorkoutWindow(RunnerDatabase * databasePointer, RunningProfile selectedProfile,QDate selectedDate,
                             QList< QList<RunningEvent> > athleteEvents)
{
    setupUi(this);

    TheDatabase = databasePointer;
    CurrentProfile = selectedProfile;
    WorkoutDate = selectedDate;
    LoadedEvents = athleteEvents;

    //Update label to show current profile name
    ProfileNameLabel->setText(selectedProfile.returnName());
    //Update label to show current date
    WorkoutDateLabel->setText(selectedDate.toString(RunnerDatabase::DATE_FORMAT));

    //Form connections
    connect(AddButton,SIGNAL(clicked()),this,SLOT(AddWorkout()));
    connect(buttonBox,SIGNAL(accepted()),this,SLOT(SaveChangesToDatabase()));
    connect(buttonBox,SIGNAL(rejected()),this,SLOT(close()));
}

//Adds a workout to every athletes list
void WorkoutWindow::AddWorkout()
{
    QString workoutName = EventNameLineEdit->text();
    //Creating an entry for every athlete in their appropriate list
    QList<Athlete> athleteList = CurrentProfile.returnAllAthletes();
    //Set up event with base information
    RunningEvent newEvent;
    newEvent.setName(workoutName);
    newEvent.setDate(WorkoutDate);
    //Add it to every athlete event list
    for (int i = 0; i < LoadedEvents.size(); i++)
    {
        Athlete currentAthlete = athleteList.at(i);
        QList<RunningEvent> athleteEvents = LoadedEvents.at(i);
        RunningEvent newEvent;
        newEvent.setAthleteID(currentAthlete.returnID());
        newEvent.setEventOrderNumber(athleteEvents.size());
        athleteEvents.append(newEvent);
        //now update the list for this athlete
        LoadedEvents.replace(i,athleteEvents);
    }
}

void WorkoutWindow::findModelWorkout()
{
    //We will parse through the current event list and find a workout that will serve for all athletes
    //If one should exist
    
}

//Updates list viewable to user
void WorkoutWindow::UpdateWorkoutList()
{

}

//Carries out changes to database
void WorkoutWindow::SaveChangesToDatabase()
{
    //Save all of the events that are available
    for (int i = 0; i < LoadedEvents.size(); i++)
    {
        QList<RunningEvent> currentAthleteEvents = LoadedEvents.at(i);
        for (int j = 0; j < currentAthleteEvents.size(); j++)
        {
            RunningEvent currentEvent = currentAthleteEvents.at(j);
            int eventID = currentEvent.returnID();
            //Doesn't exist in database, now add it
            if (eventID == 0)
            {
                if (!TheDatabase->addEvent(currentEvent))
                {
                    qDebug() << "Unable to add Event to Database from Workout Window";
                }
            }
            //Update it's entry in the database
            else
            {
                if (!TheDatabase->updateEvent(currentEvent))
                {
                    qDebug() << "Unable to update Event in Database from Workout Window";
                }
            }
        }
    }

    //Remove all events that are meant to be removed from the Database
    for (int i = 0; i < EventsToBeRemoved.size(); i++)
    {
        RunningEvent currentEvent = EventsToBeRemoved.at(i);
        int eventID = currentEvent.returnAthleteID();
        if (eventID != 0)
        {
            if (!TheDatabase->removeEvent(eventID))
            {
                qDebug() << "Unable to remove event from the Workout Window";
            }
        }
    }
}

WorkoutWindow::~WorkoutWindow()
{
    //Destructor
}
